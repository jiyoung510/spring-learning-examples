package org.zerock.aop;

import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

import lombok.extern.log4j.Log4j2;

@Aspect
@Log4j2
@Component
public class LogAdvice {
	@Before( "execution(* org.zerock.service.SampleService*.*(..))")
	//execution : 접근제한자와 특정 클래스의 메서드 지정
	//* : 접근 제한자(맨앞) / 클래스의 이름과 메서드의 이름(맨뒤)
	public void logBefore() {
		log.info("===============================");
	}
	
	@Before( "execution(* org.zerock.service.SampleService*.doAdd(String, String)) && args(str1, str2)")
	public void logBeforeWithParam(String str1, String str2) {
		log.info("str1 : " + str1);
		log.info("str2 : " + str2);
	}
	
	@AfterThrowing(pointcut = "execution(* org.zerock.service.SampleService*.*(..))", throwing="exception")
	// AfterThrowing 어노테이션은 지정된 대상이 예외를 발생한 후에 동작 -> 문제를 찾을 수 있도록 도움
	public void logException(Exception exception) {
		log.info("Exception...!");
		log.info("exception : " + exception);
	}
}
