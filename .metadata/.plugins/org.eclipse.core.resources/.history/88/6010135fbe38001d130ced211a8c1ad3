package org.zerock.srevice;

import java.util.Arrays;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.zerock.service.SampleService;

import lombok.Setter;
import lombok.extern.log4j.Log4j2;

@RunWith(SpringJUnit4ClassRunner.class)
@Log4j2
@ContextConfiguration({"file:src/main/webapp/WEB-INF/spring/root-context.xml"})
public class SampleServiceTests {
	@Setter(onMethod_ = @Autowired)
	private SampleService service;
	
	@Test
	public void testClass() {
		log.info(service);
		log.info(service.getClass().getName());
	}
	
	@Test
	public void testAdd() throws Exception {
		log.info(service.doAdd("123", "456"));
	}
	
	@Test
	public void testAddError() throws Exception {
		log.info(service.doAdd("123", "ABC"));
		// doAdd()는 숫자로 변환이 가능한 문자열을 파라미터로 지정해야 하는데 고의적으로 'ABC'와 같은 문자를 전달하면 에러 로그 출력
		// exception: java.lang.NumberFormatException : For input string : "ABC"
	}
	
	@Around("execution(* org.zerock.service.SampleService*.*(..))")
	// Around 어노테이션의 동작 : 직접 대상 메서드를 실행할 수 있는 권한을 가지고 있고, 메서드의 실행 전과 실행 후에 처리가 가능
	// AOP를 이용한 구체적인 처리 -> @Around, ProceedingJoinPoint
	public Object logTime( ProceedingJoinPoint pjp) {
		// logTime의 파라미터 : ProceedingJoinPoint
		// ProceedingJoinPoint는 AOP의 대상이 되는 Target이나 파라미터 등을 파악, 직접 실행을 결정
		// Around 어노테이션이 적용되는 메서드의 경우에는 리턴 타입이 void가 아닌 타입으로 설정
		// 메서드의 실행 결과 역시 직접 반환하는 형태로 작성
		long start = System.currentTimeMillis();
		
		log.info("Target : " + pjp.getTarget());
		log.info("Param : " + Arrays.toString(pjp.getArgs()));
		
		// invoke method
		Object result = null;
		
		try {
			result = pjp.proceed();
		} catch(Throwable e) {
			e.printStackTrace();
		}
		
		long end = System.currentTimeMillis();
		
		log.info("TIME : " + (end - start));
		
		return result;
	}
}
